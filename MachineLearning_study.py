# -*- coding: utf-8 -*-


# 머신 러닝 기본기
# =============================================================================
# 머신 러닝이란?

# 기계학습 : 기계가 학습을 통해 발점
# 머신 러닝 프로그램 : 경험을 통해서 스스로 업무 능력 향상


# 머신 러닝이 핫해진 이유

# 1. 사용할 수 있는 데이터가 많아졌다.
# 예전에는 아날로그식으로 데이터를 저장했다면 요즘에는
# 컴퓨터, 인터넷, 스마트폰이 발전되고나서부터는 데이터가 많아졌다.

# 2. 컴퓨터 성능이 좋아졌다!

# 3. 활용성이 증명되었다.


# 인공 지능? 빅 데이터? 머신 러닝?

# 빅데이터
# 엄청나게 많은 양의 데이터를 다루는 분야
# 데이터 보관/처리법
# 데이터 분석 방법들

# 인공지능
# 프로그램이 인간처럼 생각/행동하게 하는 학문

# 딥러닝
# 머신 러닝 기법 중 하나
# 층이 "깊어"진다 -> "딥"러닝


# 학습의 유형

# 머신러닝은 학습이 크게 3가지로 나뉜다
# 지도학습, 비지도학습, 강화학습

# 지도학습(Supervised learning) - 학습 데이터의 답을 정해줘야 한다.
# "답"이 있고 이 답을 맞추는 게 학습의 목적 
# -> 지도학습과 비지도학습의 주요 차이
# 지도학습도 두가지로 나뉜다
# 분류(Classfication), 회귀(Regression)
# 분류 예시 : 스팸메일 고르기
# 회귀 예시 : 아파트 가격 예측

# 비지도학습(Unsupervised learning)
# "답"이 없고 이 답을 맞추는 게 학습의 목적
# 프로그램이 알아서 정한다
# 프로그램이 정답 없이 "비슷한" 기준대로 묶음


# k-NN알고리즘(k-최근접 이웃 알고리즘)
# 최고로 가까운 데이터 k개를 기준으로 더 많은 쪽으로 예측


# 머신 러닝의 수학

# 머신러닝은 컴퓨터 과학분야이면서 동시에 수학분야이다
# 수학은 크게 4가지로 본다
# 선형대수, 미적분, 통계, 확률

# 선형대수학
# 행렬

# 미적분학
# 최적화

# 통계
# 그 데이터의 특징을 파악

# 확률
# 가능성


# 일차식과 일차 함수

# 선형 대수학
# 일차식이나 일차 함수를 공부하는 학문
# 일차식 - 가장 높은 차수가 1인 다항식
# 다항식 - 항이 여러개여서 다항식(2x³-y²+4y+1) 차수가 3인 다항식
# 일차 함수 - 가장 높은 차수가 1일 함수


# 일차 함수 표기법

# f(x,y) = 3x +3y + 4
# f(x,y,z,a,b,c) = 4x+y-2z+16a+7b+3c


# 행렬과 벡터

# 행렬 : Matrix
# 행렬의 가로줄은 행(row)라 부르고 세로줄은 열(column)이라 부른다
# 4 x 2 행렬은 행이 4개 열이 2개라고 말한다

# 벡터 : Vector
# 열벡터, 행벡터라 부르지만 열벡터를 더 많이 쓰기 때문에 벡터라고 하면
# 열벡터라 생각하면 된다
# 벡터는 열이 하나밖에 없거나 행이 하나밖에 없다

# 행렬은 대문자로 나타내고 벡터는 소문자로 나타낸다.


# numpy로 행렬 사용하기
print('numpy로 행렬 사용하기')
import numpy as np

A = np.array([[1, -1, 2],
              [3, 2, 2],
              [4, 1, 2],
              [7, 5, 6]])
print(A)

B = np.array([[0, 1],
              [-1, 3],
              [5, 2]])
print(B)

C = np.random.rand(3, 5)
print(C)

D = np.zeros((2, 4)) # ()를 한번 더 써줘야 한다.
print(D)

print(A[0, 2])
print()

A = np.array([[0, 1, -1],
              [1, 2, 3],
              [2, 1, 0],
              [-1, 2, -4]])

B = np.array([[0, 2],
              [1, 1],
              [-1, -2]])

A[1, 1]
A[3, 0]
# =============================================================================

